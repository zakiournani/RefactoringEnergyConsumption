[[1;34mINFO[m] Scanning for projects...
[[1;33mWARNING[m] 
[[1;33mWARNING[m] Some problems were encountered while building the effective model for JsonBench:JsonBench:jar:0.0.1-SNAPSHOT
[[1;33mWARNING[m] 'dependencies.dependency.systemPath' for gson:gson:jar should use a variable instead of a hard-coded path /home/jffk0586/eclipse-workspace/JsonBench/gsonJar/gson.jar @ line 34, column 22
[[1;33mWARNING[m] 'build.plugins.plugin.version' for org.codehaus.mojo:exec-maven-plugin is missing. @ line 46, column 11
[[1;33mWARNING[m] 
[[1;33mWARNING[m] It is highly recommended to fix these problems because they threaten the stability of your build.
[[1;33mWARNING[m] 
[[1;33mWARNING[m] For this reason, future Maven versions might no longer support building such malformed projects.
[[1;33mWARNING[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m------------------------< [0;36mJsonBench:JsonBench[0;1m >-------------------------[m
[[1;34mINFO[m] [1mBuilding JsonBench 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Deleting /home/jffk0586/eclipse-workspace/JsonBench/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/jffk0586/eclipse-workspace/JsonBench/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:compile[m [1m(default-compile)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 4 source files to /home/jffk0586/eclipse-workspace/JsonBench/target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /home/jffk0586/eclipse-workspace/JsonBench/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:testCompile[m [1m(default-testCompile)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 1 source file to /home/jffk0586/eclipse-workspace/JsonBench/target/test-classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Surefire report directory: /home/jffk0586/eclipse-workspace/JsonBench/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running JsonBench.JsonBench.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-jar-plugin:2.4:jar[m [1m(default-jar)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Building jar: /home/jffk0586/eclipse-workspace/JsonBench/target/JsonBench-0.0.1-SNAPSHOT.jar
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-shade-plugin:3.2.0:shade[m [1m(default)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Including org.openjdk.jmh:jmh-core:jar:1.22 in the shaded jar.
[[1;34mINFO[m] Including net.sf.jopt-simple:jopt-simple:jar:4.6 in the shaded jar.
[[1;34mINFO[m] Including org.apache.commons:commons-math3:jar:3.2 in the shaded jar.
[[1;34mINFO[m] Including org.openjdk.jmh:jmh-generator-annprocess:jar:1.22 in the shaded jar.
[[1;34mINFO[m] Replacing /home/jffk0586/eclipse-workspace/JsonBench/target/benchmarks.jar with /home/jffk0586/eclipse-workspace/JsonBench/target/JsonBench-0.0.1-SNAPSHOT-shaded.jar
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mexec-maven-plugin:3.0.0:exec[m [1m(run-benchmarks)[m @ [36mJsonBench[0;1m ---[m
# JMH version: 1.22
# VM version: JDK 1.8.0_242, OpenJDK 64-Bit Server VM, 25.242-b08
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: JsonBench.JsonBench.App.benchmarkSerializationWithGSON

# Run progress: 0.00% complete, ETA 00:02:10
# Fork: 1 of 5
# Warmup Iteration   1: 25604427+ 12102996+ 1.221 s/op
# Warmup Iteration   2: 8030131+ 6004624+ 8613503+ 5700974+ 0.561 s/op
# Warmup Iteration   3: 5394639+ 5443529+ 5509996+ 5690964+ 5482591+ 0.435 s/op
Iteration   1: 4879260+ 5121081+ 5197923+ 4976306+ 5419481+ 0.410 s/op
Iteration   2: 4963244+ 4893604+ 5943466+ 5022082+ 5293992+ 0.414 s/op
Iteration   3: 5785446+ 5866746+ 5471970+ 5233752+ 4575305+ 0.428 s/op
Iteration   4: 5351488+ 5199572+ 4949084+ 4851306+ 4562915+ 5062854+ 0.400 s/op
Iteration   5: 4633106+ 4785694+ 4653613+ 4758289+ 4667713+ 7024213+ 0.399 s/op
Iteration   6: 5008471+ 5183824+ 5092822+ 4649951+ 4926196+ 4709766+ 0.397 s/op
Iteration   7: 4589160+ 4748218+ 4589771+ 4675342+ 4581775+ 4909717+ 0.382 s/op
Iteration   8: 4575183+ 4915576+ 4569873+ 4571888+ 4809802+ 4687671+ 0.382 s/op
Iteration   9: 4658008+ 4584400+ 4848437+ 4684681+ 4857592+ 4662037+ 0.384 s/op
Iteration  10: 4608936+ 4792163+ 4604785+ 4666858+ 4568287+ 4817859+ 0.382 s/op

# Run progress: 20.00% complete, ETA 00:01:59
# Fork: 2 of 5
# Warmup Iteration   1: 25319577+ 10416966+ 1.111 s/op
# Warmup Iteration   2: 7432598+ 6621443+ 7695049+ 5145922+ 0.539 s/op
# Warmup Iteration   3: 5077563+ 4820361+ 6114669+ 5362414+ 4760302+ 0.425 s/op
Iteration   1: 4895862+ 4747424+ 5076037+ 4734058+ 5011583+ 0.400 s/op
Iteration   2: 4812549+ 4731250+ 4891528+ 4747302+ 5511094+ 4774646+ 0.399 s/op
Iteration   3: 4990771+ 4809131+ 5025133+ 4779651+ 4806018+ 4928088+ 0.398 s/op
Iteration   4: 4776477+ 4874499+ 4727649+ 4964587+ 4755847+ 4824634+ 0.396 s/op
Iteration   5: 4779773+ 4653918+ 4792163+ 4735157+ 4817004+ 4795520+ 0.393 s/op
Iteration   6: 4856371+ 4749926+ 4814807+ 4971545+ 4690418+ 4850574+ 0.397 s/op
Iteration   7: 4709155+ 4878711+ 4724109+ 4785449+ 4687854+ 4854663+ 0.394 s/op
Iteration   8: 4701831+ 4777332+ 4751208+ 4895068+ 5090929+ 4769092+ 0.397 s/op
Iteration   9: 4967944+ 4734546+ 5111132+ 4764270+ 4767688+ 5260607+ 0.405 s/op
Iteration  10: 4727039+ 4825610+ 4754749+ 5123644+ 4732165+ 4839160+ 0.398 s/op

# Run progress: 40.00% complete, ETA 00:01:30
# Fork: 3 of 5
# Warmup Iteration   1: 25930476+ 13505397+ 1.237 s/op
# Warmup Iteration   2: 7730388+ 6916059+ 7138837+ 5101061+ 0.536 s/op
# Warmup Iteration   3: 4979785+ 4675403+ 6158797+ 5095629+ 4779224+ 0.419 s/op
Iteration   1: 4855761+ 4655323+ 5004382+ 4790088+ 4927599+ 4768970+ 0.395 s/op
Iteration   2: 4663746+ 4749072+ 4640491+ 4745166+ 4654468+ 5003772+ 0.388 s/op
Iteration   3: 4888720+ 5029345+ 4653430+ 4682300+ 4783374+ 4989184+ 0.393 s/op
Iteration   4: 5136156+ 4674671+ 5125963+ 5000720+ 6072799+ 0.419 s/op
Iteration   5: 5046007+ 5005542+ 4693835+ 4678760+ 5217272+ 5039599+ 0.401 s/op
Iteration   6: 5164598+ 5325548+ 5541123+ 4905383+ 4653796+ 0.417 s/op
Iteration   7: 4835803+ 4740955+ 4776538+ 4719410+ 5211168+ 5035998+ 0.400 s/op
Iteration   8: 5190904+ 4776538+ 4735584+ 4841906+ 4951953+ 0.402 s/op
Iteration   9: 4942919+ 4849658+ 4846729+ 4676867+ 7884685+ 0.426 s/op
Iteration  10: 4977649+ 5277758+ 4886157+ 4739490+ 4905321+ 0.407 s/op

# Run progress: 60.00% complete, ETA 00:00:59
# Fork: 4 of 5
# Warmup Iteration   1: 27503530+ 10913608+ 1.179 s/op
# Warmup Iteration   2: 6855146+ 5926071+ 7921000+ 4947375+ 0.526 s/op
# Warmup Iteration   3: 4922656+ 4618946+ 5756333+ 5342882+ 4930590+ 0.412 s/op
Iteration   1: 4804736+ 4584095+ 4944262+ 4624866+ 4847217+ 4648426+ 0.387 s/op
Iteration   2: 4629504+ 5349413+ 4908313+ 4786059+ 4554981+ 4885302+ 0.392 s/op
Iteration   3: 4531910+ 5242113+ 4916675+ 4921253+ 4952624+ 4740955+ 0.394 s/op
Iteration   4: 4840381+ 4756946+ 5258348+ 4895129+ 5367479+ 4623950+ 0.396 s/op
Iteration   5: 4553699+ 4613025+ 4950183+ 4881823+ 4743946+ 4847277+ 0.386 s/op
Iteration   6: 4550404+ 4948962+ 4573230+ 4504078+ 4791736+ 4558887+ 0.380 s/op
Iteration   7: 4610950+ 4508106+ 4752490+ 4591907+ 4749195+ 4583423+ 0.381 s/op
Iteration   8: 5044115+ 4692981+ 4576893+ 4630542+ 4539417+ 4866503+ 0.382 s/op
Iteration   9: 4631580+ 4793811+ 5043261+ 5009021+ 4669055+ 4849780+ 0.390 s/op
Iteration  10: 4974902+ 4862842+ 5058703+ 4961230+ 5006823+ 0.400 s/op

# Run progress: 80.00% complete, ETA 00:00:29
# Fork: 5 of 5
# Warmup Iteration   1: 27918508+ 16440571+ 1.436 s/op
# Warmup Iteration   2: 12590605+ 5239001+ 7234478+ 5343798+ 0.581 s/op
# Warmup Iteration   3: 5954453+ 5440477+ 6091171+ 5304857+ 4930041+ 0.441 s/op
Iteration   1: 4885790+ 6876326+ 5150194+ 0.763 s/op
Iteration   2: 4831409+ 5056749+ 4761768+ 4870288+ 4864794+ 0.400 s/op
Iteration   3: 4979175+ 5426499+ 4813831+ 5194139+ 4866687+ 0.409 s/op
Iteration   4: 5147020+ 4853259+ 4798999+ 4907336+ 4767505+ 0.401 s/op
Iteration   5: 5207384+ 4927966+ 4946032+ 4796985+ 5012438+ 0.407 s/op
Iteration   6: 4822437+ 5062487+ 4803943+ 5162401+ 4840564+ 0.402 s/op
Iteration   7: 4835559+ 4873767+ 4756335+ 4868823+ 4796741+ 5236864+ 0.400 s/op
Iteration   8: 4799121+ 5173693+ 4926623+ 4803088+ 4855395+ 0.402 s/op
Iteration   9: 5012927+ 4870410+ 4794665+ 5082568+ 4799365+ 0.402 s/op
Iteration  10: 5132311+ 4807666+ 4804004+ 5069018+ 4757922+ 0.401 s/op


Result "JsonBench.JsonBench.App.benchmarkSerializationWithGSON":
  0.406 Â±(99.9%) 0.026 s/op [Average]
  (min, avg, max) = (0.380, 0.406, 0.763), stdev = 0.053
  CI (99.9%): [0.380, 0.432] (assumes normal distribution)


# Run complete. Total time: 00:02:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt  Score   Error  Units
JsonBench.JsonBench.App.benchmarkSerializationWithGSON  avgt   50  0.406 Â± 0.026   s/op
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-install-plugin:2.4:install[m [1m(default-install)[m @ [36mJsonBench[0;1m ---[m
[[1;34mINFO[m] Installing /home/jffk0586/eclipse-workspace/JsonBench/target/JsonBench-0.0.1-SNAPSHOT.jar to /home/jffk0586/.m2/repository/JsonBench/JsonBench/0.0.1-SNAPSHOT/JsonBench-0.0.1-SNAPSHOT.jar
[[1;34mINFO[m] Installing /home/jffk0586/eclipse-workspace/JsonBench/pom.xml to /home/jffk0586/.m2/repository/JsonBench/JsonBench/0.0.1-SNAPSHOT/JsonBench-0.0.1-SNAPSHOT.pom
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  02:31 min
[[1;34mINFO[m] Finished at: 2020-09-04T16:07:31+02:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
